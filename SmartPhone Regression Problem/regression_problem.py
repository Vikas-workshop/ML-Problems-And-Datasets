# -*- coding: utf-8 -*-
"""Regression_Problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CE8yyBelKG_70pkQ1skimqcTSoS7xVJP
"""

import pandas as pd
# reading csv files
dataset = pd.read_csv("smartphones.csv")

# checking the data sample
# dataset.head()

# to check the dataset of colums type
# dataset.info()

# checking the shape of a dataset
# dataset.shape()

# checking any null value is there in whole columns
# dataset.isnull().sum()

# droping the null values of columns and checking the columns
dataset.dropna(inplace=True)
# dataset.isnull().sum()

# now importing the labelEnconder to convert the text into a number
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

# to see the value of some specific column which is repeated or not
dataset['model'].value_counts()

# to see or get the whole columns of the dataset
dataset.columns

# now get the whole column of dataset and convert it into a number removed two colums 'price', 'rating',
# because rating is already a number and i dont want to assign random number to price
colums  =['model', 'sim', 'processor', 'ram', 'battery','display', 'camera', 'card', 'os']
for col in colums:
    dataset[col] = label_encoder.fit_transform(dataset[col])

# now here the whole columns are assigned as a number exepted the price column
dataset.head()

# lets purify the price column into a number only
# because i want to predict the price

# this function returns the series of price in a form of array of integers
def purify_price(priceSeries):
  priceLst = []
  for price in priceSeries:
    purifyPrice = price.replace(",","").replace("â‚¹","")
    priceLst.append(int(purifyPrice))
  return priceLst

# here i'm assigning the new price series into a price column of dataset
dataset["price"] = purify_price(dataset["price"])


# this problem is a regression problem because we have to predict the price(integers) of the smartphone
# now i m using the linear regression model for this problem
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# here i m take the whole columns of dataset except the price column in variable x
X = dataset[colums]
# and y is predicted element
y = dataset['price']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train,y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# now checking the mean squared error
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Optionally, you can also check the R-squared score
from sklearn.metrics import r2_score
r2 = r2_score(y_test, y_pred)
print(f'R-squared Score: {r2}')

